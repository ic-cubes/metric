type TrackerRequest = 
 record {
   action: variant {
             delete;
             pause;
             set: AttributeDescription;
             unpause;
           };
   attributeId: opt AttributeId;
 };
type TimeSeries = 
 record {
   timestamp: int;
   value: int;
 };
type Status = 
 variant {
   active;
   paused;
 };
type Result_2 = 
 variant {
   err: MetricsError;
   ok: AttributeRecord;
 };
type Result = 
 variant {
   err: MetricsError;
   ok: AttributeId;
 };
type MetricsResponse = Result;
type MetricsError = 
 variant {
   AttributePaused;
   FailedGettingValue;
   InvalidId;
   Unauthorized;
 };
type GetRequest = 
 record {
   attributeId: AttributeId;
   before: opt int;
   limit: opt nat;
   period: opt GetPeriod;
 };
type GetPeriod = 
 variant {
   Day;
   Hour;
   Minute;
   Week;
 };
type GetAttributeDescription = 
 record {
   description: opt text;
   id: AttributeId;
   name: text;
   polling_frequency: opt Frequency;
   status: Status;
 };
type Frequency = 
 record {
   n: nat;
   period: variant {
             Day;
             Hour;
             Minute;
           };
 };
type AttributeRecord = 
 record {
   description: AttributeDescription;
   id: AttributeId;
   "principal": principal;
   series: vec TimeSeries;
   status: Status;
 };
type AttributeId = nat;
type AttributeDescription = 
 record {
   description: opt text;
   getter: func () -> (int);
   name: text;
   polling_frequency: opt Frequency;
 };
service : {
  allActiveAttributes: () -> (vec GetAttributeDescription) query;
  attributesByPrincipal: (principal) -> (vec GetAttributeDescription) query;
  execute: (AttributeId) -> (MetricsResponse);
  recordById: (GetRequest) -> (Result_2) query;
  track: (TrackerRequest) -> (MetricsResponse);
}
